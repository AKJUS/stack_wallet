// Mocks generated by Mockito 5.2.0 from annotations
// in stackwallet/test/widget_tests/node_card_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stackwallet/models/node_model.dart' as _i4;
import 'package:stackwallet/services/node_service.dart' as _i3;
import 'package:stackwallet/utilities/enums/coin_enum.dart' as _i6;
import 'package:stackwallet/utilities/flutter_secure_storage_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFlutterSecureStorageInterface_0 extends _i1.Fake
    implements _i2.FlutterSecureStorageInterface {}

/// A class which mocks [NodeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNodeService extends _i1.Mock implements _i3.NodeService {
  @override
  _i2.FlutterSecureStorageInterface get secureStorageInterface =>
      (super.noSuchMethod(Invocation.getter(#secureStorageInterface),
              returnValue: _FakeFlutterSecureStorageInterface_0())
          as _i2.FlutterSecureStorageInterface);
  @override
  List<_i4.NodeModel> get primaryNodes =>
      (super.noSuchMethod(Invocation.getter(#primaryNodes),
          returnValue: <_i4.NodeModel>[]) as List<_i4.NodeModel>);
  @override
  List<_i4.NodeModel> get nodes =>
      (super.noSuchMethod(Invocation.getter(#nodes),
          returnValue: <_i4.NodeModel>[]) as List<_i4.NodeModel>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.Future<void> updateDefaults() =>
      (super.noSuchMethod(Invocation.method(#updateDefaults, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> setPrimaryNodeFor(
          {_i6.Coin? coin,
          _i4.NodeModel? node,
          bool? shouldNotifyListeners = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setPrimaryNodeFor, [], {
            #coin: coin,
            #node: node,
            #shouldNotifyListeners: shouldNotifyListeners
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i4.NodeModel? getPrimaryNodeFor({_i6.Coin? coin}) => (super.noSuchMethod(
          Invocation.method(#getPrimaryNodeFor, [], {#coin: coin}))
      as _i4.NodeModel?);
  @override
  List<_i4.NodeModel> getNodesFor(_i6.Coin? coin) =>
      (super.noSuchMethod(Invocation.method(#getNodesFor, [coin]),
          returnValue: <_i4.NodeModel>[]) as List<_i4.NodeModel>);
  @override
  _i4.NodeModel? getNodeById({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getNodeById, [], {#id: id}))
          as _i4.NodeModel?);
  @override
  List<_i4.NodeModel> failoverNodesFor({_i6.Coin? coin}) => (super.noSuchMethod(
      Invocation.method(#failoverNodesFor, [], {#coin: coin}),
      returnValue: <_i4.NodeModel>[]) as List<_i4.NodeModel>);
  @override
  _i5.Future<void> add(
          _i4.NodeModel? node, String? password, bool? shouldNotifyListeners) =>
      (super.noSuchMethod(
          Invocation.method(#add, [node, password, shouldNotifyListeners]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> delete(String? id, bool? shouldNotifyListeners) => (super
      .noSuchMethod(Invocation.method(#delete, [id, shouldNotifyListeners]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> setEnabledState(
          String? id, bool? enabled, bool? shouldNotifyListeners) =>
      (super.noSuchMethod(
          Invocation.method(
              #setEnabledState, [id, enabled, shouldNotifyListeners]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> edit(_i4.NodeModel? editedNode, String? password,
          bool? shouldNotifyListeners) =>
      (super.noSuchMethod(
          Invocation.method(
              #edit, [editedNode, password, shouldNotifyListeners]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updateCommunityNodes() =>
      (super.noSuchMethod(Invocation.method(#updateCommunityNodes, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
