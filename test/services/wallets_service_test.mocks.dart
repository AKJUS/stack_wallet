// Mocks generated by Mockito 5.2.0 from annotations
// in stackwallet/test/services/wallets_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stackwallet/utilities/flutter_secure_storage_interface.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFlutterSecureStorage_0 extends _i1.Fake
    implements _i2.FlutterSecureStorage {}

/// A class which mocks [SecureStorageWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageWrapper extends _i1.Mock
    implements _i3.SecureStorageWrapper {
  MockSecureStorageWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterSecureStorage get secureStore => (super.noSuchMethod(
      Invocation.getter(#secureStore),
      returnValue: _FakeFlutterSecureStorage_0()) as _i2.FlutterSecureStorage);
  @override
  _i4.Future<String?> read(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<void> write(
          {String? key,
          String? value,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> delete(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
