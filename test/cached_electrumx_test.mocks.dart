// Mocks generated by Mockito 5.2.0 from annotations
// in stackwallet/test/cached_electrumx_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:decimal/decimal.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stackwallet/electrumx_rpc/electrumx.dart' as _i3;
import 'package:stackwallet/pages/exchange_view/sub_widgets/exchange_rate_sheet.dart'
    as _i7;
import 'package:stackwallet/utilities/enums/backup_frequency_type.dart' as _i8;
import 'package:stackwallet/utilities/enums/sync_type_enum.dart' as _i6;
import 'package:stackwallet/utilities/prefs.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDecimal_0 extends _i1.Fake implements _i2.Decimal {}

/// A class which mocks [ElectrumX].
///
/// See the documentation for Mockito's code generation for more information.
class MockElectrumX extends _i1.Mock implements _i3.ElectrumX {
  MockElectrumX() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set failovers(List<_i3.ElectrumXNode>? _failovers) =>
      super.noSuchMethod(Invocation.setter(#failovers, _failovers),
          returnValueForMissingStub: null);
  @override
  int get currentFailoverIndex =>
      (super.noSuchMethod(Invocation.getter(#currentFailoverIndex),
          returnValue: 0) as int);
  @override
  set currentFailoverIndex(int? _currentFailoverIndex) => super.noSuchMethod(
      Invocation.setter(#currentFailoverIndex, _currentFailoverIndex),
      returnValueForMissingStub: null);
  @override
  String get host =>
      (super.noSuchMethod(Invocation.getter(#host), returnValue: '') as String);
  @override
  int get port =>
      (super.noSuchMethod(Invocation.getter(#port), returnValue: 0) as int);
  @override
  bool get useSSL =>
      (super.noSuchMethod(Invocation.getter(#useSSL), returnValue: false)
          as bool);
  @override
  _i4.Future<dynamic> request(
          {String? command,
          List<dynamic>? args = const [],
          Duration? connectionTimeout = const Duration(seconds: 60),
          String? requestID,
          int? retries = 2}) =>
      (super.noSuchMethod(
          Invocation.method(#request, [], {
            #command: command,
            #args: args,
            #connectionTimeout: connectionTimeout,
            #requestID: requestID,
            #retries: retries
          }),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<Map<String, dynamic>>> batchRequest(
          {String? command,
          Map<String, List<dynamic>>? args,
          Duration? connectionTimeout = const Duration(seconds: 60),
          int? retries = 2}) =>
      (super.noSuchMethod(
              Invocation.method(#batchRequest, [], {
                #command: command,
                #args: args,
                #connectionTimeout: connectionTimeout,
                #retries: retries
              }),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i4.Future<List<Map<String, dynamic>>>);
  @override
  _i4.Future<bool> ping({String? requestID, int? retryCount = 1}) =>
      (super.noSuchMethod(
          Invocation.method(
              #ping, [], {#requestID: requestID, #retryCount: retryCount}),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<Map<String, dynamic>> getBlockHeadTip({String? requestID}) =>
      (super.noSuchMethod(
              Invocation.method(#getBlockHeadTip, [], {#requestID: requestID}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
  @override
  _i4.Future<Map<String, dynamic>> getServerFeatures({String? requestID}) =>
      (super.noSuchMethod(
          Invocation.method(#getServerFeatures, [], {#requestID: requestID}),
          returnValue:
              Future<Map<String, dynamic>>.value(<String, dynamic>{})) as _i4
          .Future<Map<String, dynamic>>);
  @override
  _i4.Future<String> broadcastTransaction({String? rawTx, String? requestID}) =>
      (super.noSuchMethod(
          Invocation.method(#broadcastTransaction, [],
              {#rawTx: rawTx, #requestID: requestID}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<Map<String, dynamic>> getBalance(
          {String? scripthash, String? requestID}) =>
      (super.noSuchMethod(
              Invocation.method(#getBalance, [],
                  {#scripthash: scripthash, #requestID: requestID}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
  @override
  _i4.Future<List<Map<String, dynamic>>> getHistory(
          {String? scripthash, String? requestID}) =>
      (super.noSuchMethod(
              Invocation.method(#getHistory, [],
                  {#scripthash: scripthash, #requestID: requestID}),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i4.Future<List<Map<String, dynamic>>>);
  @override
  _i4.Future<Map<String, List<Map<String, dynamic>>>> getBatchHistory(
          {Map<String, List<dynamic>>? args}) =>
      (super.noSuchMethod(
          Invocation.method(#getBatchHistory, [], {#args: args}),
          returnValue: Future<Map<String, List<Map<String, dynamic>>>>.value(
              <String, List<Map<String, dynamic>>>{})) as _i4
          .Future<Map<String, List<Map<String, dynamic>>>>);
  @override
  _i4.Future<List<Map<String, dynamic>>> getUTXOs(
          {String? scripthash, String? requestID}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getUTXOs, [], {#scripthash: scripthash, #requestID: requestID}),
          returnValue: Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[])) as _i4
          .Future<List<Map<String, dynamic>>>);
  @override
  _i4.Future<Map<String, List<Map<String, dynamic>>>> getBatchUTXOs(
          {Map<String, List<dynamic>>? args}) =>
      (super.noSuchMethod(Invocation.method(#getBatchUTXOs, [], {#args: args}),
          returnValue: Future<Map<String, List<Map<String, dynamic>>>>.value(
              <String, List<Map<String, dynamic>>>{})) as _i4
          .Future<Map<String, List<Map<String, dynamic>>>>);
  @override
  _i4.Future<Map<String, dynamic>> getTransaction(
          {String? txHash, bool? verbose = true, String? requestID}) =>
      (super.noSuchMethod(
              Invocation.method(#getTransaction, [],
                  {#txHash: txHash, #verbose: verbose, #requestID: requestID}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
  @override
  _i4.Future<Map<String, dynamic>> getAnonymitySet(
          {String? groupId = r'1',
          String? blockhash = r'',
          String? requestID}) =>
      (super.noSuchMethod(
              Invocation.method(#getAnonymitySet, [], {
                #groupId: groupId,
                #blockhash: blockhash,
                #requestID: requestID
              }),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
  @override
  _i4.Future<dynamic> getMintData({dynamic mints, String? requestID}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getMintData, [], {#mints: mints, #requestID: requestID}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<Map<String, dynamic>> getUsedCoinSerials(
          {String? requestID, int? startNumber}) =>
      (super.noSuchMethod(
              Invocation.method(#getUsedCoinSerials, [],
                  {#requestID: requestID, #startNumber: startNumber}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
  @override
  _i4.Future<int> getLatestCoinId({String? requestID}) => (super.noSuchMethod(
      Invocation.method(#getLatestCoinId, [], {#requestID: requestID}),
      returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<Map<String, dynamic>> getFeeRate({String? requestID}) => (super
      .noSuchMethod(Invocation.method(#getFeeRate, [], {#requestID: requestID}),
          returnValue:
              Future<Map<String, dynamic>>.value(<String, dynamic>{})) as _i4
      .Future<Map<String, dynamic>>);
  @override
  _i4.Future<_i2.Decimal> estimateFee({String? requestID, int? blocks}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #estimateFee, [], {#requestID: requestID, #blocks: blocks}),
              returnValue: Future<_i2.Decimal>.value(_FakeDecimal_0()))
          as _i4.Future<_i2.Decimal>);
  @override
  _i4.Future<_i2.Decimal> relayFee({String? requestID}) => (super.noSuchMethod(
          Invocation.method(#relayFee, [], {#requestID: requestID}),
          returnValue: Future<_i2.Decimal>.value(_FakeDecimal_0()))
      as _i4.Future<_i2.Decimal>);
}

/// A class which mocks [Prefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrefs extends _i1.Mock implements _i5.Prefs {
  MockPrefs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);
  @override
  int get lastUnlockedTimeout => (super
          .noSuchMethod(Invocation.getter(#lastUnlockedTimeout), returnValue: 0)
      as int);
  @override
  set lastUnlockedTimeout(int? lastUnlockedTimeout) => super.noSuchMethod(
      Invocation.setter(#lastUnlockedTimeout, lastUnlockedTimeout),
      returnValueForMissingStub: null);
  @override
  int get lastUnlocked =>
      (super.noSuchMethod(Invocation.getter(#lastUnlocked), returnValue: 0)
          as int);
  @override
  set lastUnlocked(int? lastUnlocked) =>
      super.noSuchMethod(Invocation.setter(#lastUnlocked, lastUnlocked),
          returnValueForMissingStub: null);
  @override
  int get currentNotificationId =>
      (super.noSuchMethod(Invocation.getter(#currentNotificationId),
          returnValue: 0) as int);
  @override
  List<String> get walletIdsSyncOnStartup =>
      (super.noSuchMethod(Invocation.getter(#walletIdsSyncOnStartup),
          returnValue: <String>[]) as List<String>);
  @override
  set walletIdsSyncOnStartup(List<String>? walletIdsSyncOnStartup) =>
      super.noSuchMethod(
          Invocation.setter(#walletIdsSyncOnStartup, walletIdsSyncOnStartup),
          returnValueForMissingStub: null);
  @override
  _i6.SyncingType get syncType =>
      (super.noSuchMethod(Invocation.getter(#syncType),
          returnValue: _i6.SyncingType.currentWalletOnly) as _i6.SyncingType);
  @override
  set syncType(_i6.SyncingType? syncType) =>
      super.noSuchMethod(Invocation.setter(#syncType, syncType),
          returnValueForMissingStub: null);
  @override
  bool get wifiOnly =>
      (super.noSuchMethod(Invocation.getter(#wifiOnly), returnValue: false)
          as bool);
  @override
  set wifiOnly(bool? wifiOnly) =>
      super.noSuchMethod(Invocation.setter(#wifiOnly, wifiOnly),
          returnValueForMissingStub: null);
  @override
  bool get showFavoriteWallets =>
      (super.noSuchMethod(Invocation.getter(#showFavoriteWallets),
          returnValue: false) as bool);
  @override
  set showFavoriteWallets(bool? showFavoriteWallets) => super.noSuchMethod(
      Invocation.setter(#showFavoriteWallets, showFavoriteWallets),
      returnValueForMissingStub: null);
  @override
  String get language =>
      (super.noSuchMethod(Invocation.getter(#language), returnValue: '')
          as String);
  @override
  set language(String? newLanguage) =>
      super.noSuchMethod(Invocation.setter(#language, newLanguage),
          returnValueForMissingStub: null);
  @override
  String get currency =>
      (super.noSuchMethod(Invocation.getter(#currency), returnValue: '')
          as String);
  @override
  set currency(String? newCurrency) =>
      super.noSuchMethod(Invocation.setter(#currency, newCurrency),
          returnValueForMissingStub: null);
  @override
  _i7.ExchangeRateType get exchangeRateType =>
      (super.noSuchMethod(Invocation.getter(#exchangeRateType),
          returnValue: _i7.ExchangeRateType.estimated) as _i7.ExchangeRateType);
  @override
  set exchangeRateType(_i7.ExchangeRateType? exchangeRateType) =>
      super.noSuchMethod(Invocation.setter(#exchangeRateType, exchangeRateType),
          returnValueForMissingStub: null);
  @override
  bool get useBiometrics =>
      (super.noSuchMethod(Invocation.getter(#useBiometrics), returnValue: false)
          as bool);
  @override
  set useBiometrics(bool? useBiometrics) =>
      super.noSuchMethod(Invocation.setter(#useBiometrics, useBiometrics),
          returnValueForMissingStub: null);
  @override
  bool get hasPin =>
      (super.noSuchMethod(Invocation.getter(#hasPin), returnValue: false)
          as bool);
  @override
  set hasPin(bool? hasPin) =>
      super.noSuchMethod(Invocation.setter(#hasPin, hasPin),
          returnValueForMissingStub: null);
  @override
  bool get showTestNetCoins =>
      (super.noSuchMethod(Invocation.getter(#showTestNetCoins),
          returnValue: false) as bool);
  @override
  set showTestNetCoins(bool? showTestNetCoins) =>
      super.noSuchMethod(Invocation.setter(#showTestNetCoins, showTestNetCoins),
          returnValueForMissingStub: null);
  @override
  bool get isAutoBackupEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAutoBackupEnabled),
          returnValue: false) as bool);
  @override
  set isAutoBackupEnabled(bool? isAutoBackupEnabled) => super.noSuchMethod(
      Invocation.setter(#isAutoBackupEnabled, isAutoBackupEnabled),
      returnValueForMissingStub: null);
  @override
  set autoBackupLocation(String? autoBackupLocation) => super.noSuchMethod(
      Invocation.setter(#autoBackupLocation, autoBackupLocation),
      returnValueForMissingStub: null);
  @override
  _i8.BackupFrequencyType get backupFrequencyType =>
      (super.noSuchMethod(Invocation.getter(#backupFrequencyType),
              returnValue: _i8.BackupFrequencyType.everyTenMinutes)
          as _i8.BackupFrequencyType);
  @override
  set backupFrequencyType(_i8.BackupFrequencyType? backupFrequencyType) =>
      super.noSuchMethod(
          Invocation.setter(#backupFrequencyType, backupFrequencyType),
          returnValueForMissingStub: null);
  @override
  set lastAutoBackup(DateTime? lastAutoBackup) =>
      super.noSuchMethod(Invocation.setter(#lastAutoBackup, lastAutoBackup),
          returnValueForMissingStub: null);
  @override
  bool get hideBlockExplorerWarning =>
      (super.noSuchMethod(Invocation.getter(#hideBlockExplorerWarning),
          returnValue: false) as bool);
  @override
  set hideBlockExplorerWarning(bool? hideBlockExplorerWarning) =>
      super.noSuchMethod(
          Invocation.setter(
              #hideBlockExplorerWarning, hideBlockExplorerWarning),
          returnValueForMissingStub: null);
  @override
  bool get gotoWalletOnStartup =>
      (super.noSuchMethod(Invocation.getter(#gotoWalletOnStartup),
          returnValue: false) as bool);
  @override
  set gotoWalletOnStartup(bool? gotoWalletOnStartup) => super.noSuchMethod(
      Invocation.setter(#gotoWalletOnStartup, gotoWalletOnStartup),
      returnValueForMissingStub: null);
  @override
  set startupWalletId(String? startupWalletId) =>
      super.noSuchMethod(Invocation.setter(#startupWalletId, startupWalletId),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> incrementCurrentNotificationIndex() => (super.noSuchMethod(
      Invocation.method(#incrementCurrentNotificationIndex, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void addListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
