/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:stackwallet/db/hive/db.dart';
import 'package:stackwallet/electrumx_rpc/electrumx_client.dart';
import 'package:stackwallet/notifications/show_flush_bar.dart';
import 'package:stackwallet/providers/global/debug_service_provider.dart';
import 'package:stackwallet/providers/providers.dart';
import 'package:stackwallet/themes/stack_colors.dart';
import 'package:stackwallet/utilities/assets.dart';
import 'package:stackwallet/utilities/constants.dart';
import 'package:stackwallet/utilities/default_nodes.dart';
import 'package:stackwallet/utilities/enums/coin_enum.dart';
import 'package:stackwallet/utilities/text_styles.dart';
import 'package:stackwallet/utilities/util.dart';
import 'package:stackwallet/wallets/models/tx_data.dart';
import 'package:stackwallet/wallets/wallet/wallet_mixin_interfaces/spark_interface.dart';
import 'package:stackwallet/widgets/background.dart';
import 'package:stackwallet/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:stackwallet/widgets/onetime_popups/tor_has_been_add_dialog.dart';
import 'package:stackwallet/widgets/rounded_white_container.dart';

class HiddenSettings extends StatelessWidget {
  const HiddenSettings({Key? key}) : super(key: key);

  static const String routeName = "/hiddenSettings";

  @override
  Widget build(BuildContext context) {
    return Background(
      child: Scaffold(
        backgroundColor: Theme.of(context).extension<StackColors>()!.background,
        appBar: AppBar(
          leading: Util.isDesktop
              ? Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: AppBarIconButton(
                    size: 32,
                    color: Theme.of(context)
                        .extension<StackColors>()!
                        .textFieldDefaultBG,
                    shadows: const [],
                    icon: SvgPicture.asset(
                      Assets.svg.arrowLeft,
                      width: 18,
                      height: 18,
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .topNavIconPrimary,
                    ),
                    onPressed: Navigator.of(context).pop,
                  ),
                )
              : Container(),
          title: Text(
            "Dev options",
            style: STextStyles.navBarTitle(context),
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: LayoutBuilder(
            builder: (context, constraints) {
              return SingleChildScrollView(
                child: ConstrainedBox(
                  constraints: BoxConstraints(
                    minHeight: constraints.maxHeight,
                  ),
                  child: IntrinsicHeight(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Consumer(builder: (_, ref, __) {
                          return GestureDetector(
                            onTap: () async {
                              final notifs =
                                  ref.read(notificationsProvider).notifications;

                              for (final n in notifs) {
                                await ref
                                    .read(notificationsProvider)
                                    .delete(n, false);
                              }
                              await ref
                                  .read(notificationsProvider)
                                  .delete(notifs[0], true);

                              if (context.mounted) {
                                unawaited(
                                  showFloatingFlushBar(
                                    type: FlushBarType.success,
                                    message: "Notification history deleted",
                                    context: context,
                                  ),
                                );
                              }
                            },
                            child: RoundedWhiteContainer(
                              child: Text(
                                "Delete notifications",
                                style: STextStyles.button(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .accentColorDark),
                              ),
                            ),
                          );
                        }),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        // Consumer(builder: (_, ref, __) {
                        //   return GestureDetector(
                        //     onTap: () async {
                        //       final trades =
                        //           ref.read(tradesServiceProvider).trades;
                        //
                        //       for (final trade in trades) {
                        //         ref.read(tradesServiceProvider).delete(
                        //             trade: trade, shouldNotifyListeners: false);
                        //       }
                        //       ref.read(tradesServiceProvider).delete(
                        //           trade: trades[0], shouldNotifyListeners: true);
                        //
                        //       // ref.read(notificationsProvider).DELETE_EVERYTHING();
                        //     },
                        //     child: RoundedWhiteContainer(
                        //       child: Text(
                        //         "Delete trade history",
                        //         style: STextStyles.button(context).copyWith(
                        //           color: Theme.of(context).extension<StackColors>()!.accentColorDark
                        //         ),
                        //       ),
                        //     ),
                        //   );
                        // }),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(builder: (_, ref, __) {
                          return GestureDetector(
                            onTap: () async {
                              await ref
                                  .read(debugServiceProvider)
                                  .deleteAllLogs();

                              if (context.mounted) {
                                unawaited(
                                  showFloatingFlushBar(
                                    type: FlushBarType.success,
                                    message: "Debug Logs deleted",
                                    context: context,
                                  ),
                                );
                              }
                            },
                            child: RoundedWhiteContainer(
                              child: Text(
                                "Delete Debug Logs",
                                style: STextStyles.button(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .accentColorDark),
                              ),
                            ),
                          );
                        }),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(builder: (_, ref, __) {
                          return GestureDetector(
                            onTap: () async {
                              await showOneTimeTorHasBeenAddedDialogIfRequired(
                                context,
                              );
                            },
                            child: RoundedWhiteContainer(
                              child: Text(
                                "Test tor stacy popup",
                                style: STextStyles.button(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .accentColorDark),
                              ),
                            ),
                          );
                        }),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(builder: (_, ref, __) {
                          return GestureDetector(
                            onTap: () async {
                              final box = await Hive.openBox<bool>(
                                  DB.boxNameOneTimeDialogsShown);
                              await box.clear();
                            },
                            child: RoundedWhiteContainer(
                              child: Text(
                                "Reset tor stacy popup",
                                style: STextStyles.button(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .accentColorDark),
                              ),
                            ),
                          );
                        }),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        // Consumer(builder: (_, ref, __) {
                        //   return GestureDetector(
                        //     onTap: () async {
                        //       final x =
                        //           await MajesticBankAPI.instance.getRates();
                        //       print(x);
                        //     },
                        //     child: RoundedWhiteContainer(
                        //       child: Text(
                        //         "Click me",
                        //         style: STextStyles.button(context).copyWith(
                        //             color: Theme.of(context)
                        //                 .extension<StackColors>()!
                        //                 .accentColorDark),
                        //       ),
                        //     ),
                        //   );
                        // }),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        // Consumer(builder: (_, ref, __) {
                        //   return GestureDetector(
                        //     onTap: () async {
                        //       ref
                        //           .read(priceAnd24hChangeNotifierProvider)
                        //           .tokenContractAddressesToCheck
                        //           .add(
                        //               "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48");
                        //       ref
                        //           .read(priceAnd24hChangeNotifierProvider)
                        //           .tokenContractAddressesToCheck
                        //           .add(
                        //               "0xdAC17F958D2ee523a2206206994597C13D831ec7");
                        //       await ref
                        //           .read(priceAnd24hChangeNotifierProvider)
                        //           .updatePrice();
                        //
                        //       final x = ref
                        //           .read(priceAnd24hChangeNotifierProvider)
                        //           .getTokenPrice(
                        //               "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48");
                        //
                        //       print(
                        //           "PRICE 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48: $x");
                        //     },
                        //     child: RoundedWhiteContainer(
                        //       child: Text(
                        //         "Click me",
                        //         style: STextStyles.button(context).copyWith(
                        //             color: Theme.of(context)
                        //                 .extension<StackColors>()!
                        //                 .accentColorDark),
                        //       ),
                        //     ),
                        //   );
                        // }),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        // Consumer(builder: (_, ref, __) {
                        //   return GestureDetector(
                        //     onTap: () async {
                        //       // final erc20 = Erc20ContractInfo(
                        //       //   contractAddress: 'some con',
                        //       //   name: "loonamsn",
                        //       //   symbol: "DD",
                        //       //   decimals: 19,
                        //       // );
                        //       //
                        //       // final json = erc20.toJson();
                        //       //
                        //       // print(json);
                        //       //
                        //       // final ee = EthContractInfo.fromJson(json);
                        //       //
                        //       // print(ee);
                        //     },
                        //     child: RoundedWhiteContainer(
                        //       child: Text(
                        //         "Click me",
                        //         style: STextStyles.button(context).copyWith(
                        //             color: Theme.of(context)
                        //                 .extension<StackColors>()!
                        //                 .accentColorDark),
                        //       ),
                        //     ),
                        //   );
                        // }),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            if (ref.watch(prefsChangeNotifierProvider
                                    .select((value) => value.familiarity)) <
                                6) {
                              return GestureDetector(
                                onTap: () async {
                                  final familiarity = ref
                                      .read(prefsChangeNotifierProvider)
                                      .familiarity;
                                  if (familiarity < 6) {
                                    ref
                                        .read(prefsChangeNotifierProvider)
                                        .familiarity = 6;

                                    Constants.exchangeForExperiencedUsers(6);
                                  }
                                },
                                child: RoundedWhiteContainer(
                                  child: Text(
                                    "Enable exchange",
                                    style: STextStyles.button(context).copyWith(
                                        color: Theme.of(context)
                                            .extension<StackColors>()!
                                            .accentColorDark),
                                  ),
                                ),
                              );
                            } else {
                              return Container();
                            }
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                //
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Do nothing",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                try {
                                  final n = DefaultNodes.firoTestnet;

                                  final e = ElectrumXClient.from(
                                    node: ElectrumXNode(
                                      address: n.host,
                                      port: n.port,
                                      name: n.name,
                                      id: n.id,
                                      useSSL: n.useSSL,
                                    ),
                                    prefs:
                                        ref.read(prefsChangeNotifierProvider),
                                    failovers: [],
                                  );

                                  // Call and print getSparkAnonymitySet.
                                  final anonymitySet =
                                      await e.getSparkAnonymitySet(
                                    coinGroupId: "1",
                                    startBlockHash: "",
                                  );

                                  Util.printJson(anonymitySet, "anonymitySet");
                                } catch (e, s) {
                                  print("$e\n$s");
                                }
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Spark getSparkAnonymitySet",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                try {
                                  final n = DefaultNodes.firoTestnet;

                                  final e = ElectrumXClient.from(
                                    node: ElectrumXNode(
                                      address: n.host,
                                      port: n.port,
                                      name: n.name,
                                      id: n.id,
                                      useSSL: n.useSSL,
                                    ),
                                    prefs:
                                        ref.read(prefsChangeNotifierProvider),
                                    failovers: [],
                                  );

                                  // Call and print getUsedCoinsTags.
                                  final usedCoinsTags = await e
                                      .getSparkUsedCoinsTags(startNumber: 0);

                                  print(
                                      "usedCoinsTags['tags'].length: ${usedCoinsTags["tags"].length}");
                                  Util.printJson(
                                      usedCoinsTags, "usedCoinsTags");
                                } catch (e, s) {
                                  print("$e\n$s");
                                }
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Spark getSparkUsedCoinsTags",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                try {
                                  final n = DefaultNodes.firoTestnet;

                                  final e = ElectrumXClient.from(
                                    node: ElectrumXNode(
                                      address: n.host,
                                      port: n.port,
                                      name: n.name,
                                      id: n.id,
                                      useSSL: n.useSSL,
                                    ),
                                    prefs:
                                        ref.read(prefsChangeNotifierProvider),
                                    failovers: [],
                                  );

                                  // Call and print getSparkMintMetaData.
                                  final mintMetaData =
                                      await e.getSparkMintMetaData(
                                    sparkCoinHashes: [
                                      "b476ed2b374bb081ea51d111f68f0136252521214e213d119b8dc67b92f5a390",
                                    ],
                                  );

                                  Util.printJson(mintMetaData, "mintMetaData");
                                } catch (e, s) {
                                  print("$e\n$s");
                                }
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Spark getSparkMintMetaData",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                try {
                                  final n = DefaultNodes.firoTestnet;

                                  final e = ElectrumXClient.from(
                                    node: ElectrumXNode(
                                      address: n.host,
                                      port: n.port,
                                      name: n.name,
                                      id: n.id,
                                      useSSL: n.useSSL,
                                    ),
                                    prefs:
                                        ref.read(prefsChangeNotifierProvider),
                                    failovers: [],
                                  );

                                  // Call and print getSparkLatestCoinId.
                                  final latestCoinId =
                                      await e.getSparkLatestCoinId();

                                  Util.printJson(latestCoinId, "latestCoinId");
                                } catch (e, s) {
                                  print("$e\n$s");
                                }
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Spark getSparkLatestCoinId",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                try {
                                  // Run refreshSparkData.
                                  //
                                  // Search wallets for a Firo testnet wallet.
                                  for (final wallet
                                      in ref.read(pWallets).wallets) {
                                    if (!(wallet.info.coin ==
                                        Coin.firoTestNet)) {
                                      continue;
                                    }
                                    // This is a Firo testnet wallet.
                                    final walletId = wallet.info.walletId;

                                    // // Search for `circle chunk...` mnemonic.
                                    // final potentialWallet =
                                    //     ref.read(pWallets).getWallet(walletId)
                                    //         as MnemonicInterface;
                                    // final mnemonic = await potentialWallet
                                    //     .getMnemonicAsWords();
                                    // if (!(mnemonic[0] == "circle" &&
                                    //     mnemonic[1] == "chunk)")) {
                                    //   // That ain't it.  Skip this one.
                                    //   return;
                                    // }
                                    // Hardcode key in refreshSparkData instead.

                                    // Get a Spark interface.
                                    final fusionWallet = ref
                                        .read(pWallets)
                                        .getWallet(walletId) as SparkInterface;

                                    // Refresh Spark data.
                                    await fusionWallet.refreshSparkData();

                                    // We only need to run this once.
                                    break;
                                  }
                                } catch (e, s) {
                                  print("$e\n$s");
                                }
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Refresh Spark wallet",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                try {
                                  // Run prepareSparkMintTransaction.
                                  for (final wallet
                                      in ref.read(pWallets).wallets) {
                                    // Prepare tx with a Firo testnet wallet.
                                    if (!(wallet.info.coin ==
                                        Coin.firoTestNet)) {
                                      continue;
                                    }
                                    final walletId = wallet.info.walletId;

                                    // Get a Spark interface.
                                    final fusionWallet = ref
                                        .read(pWallets)
                                        .getWallet(walletId) as SparkInterface;

                                    // Make a dummy TxData.
                                    TxData txData = TxData(); // TODO

                                    await fusionWallet
                                        .prepareSparkMintTransaction(
                                            txData: txData);

                                    // We only need to run this once.
                                    break;
                                  }
                                } catch (e, s) {
                                  print("$e\n$s");
                                }
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Prepare Spark mint transaction",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        // GestureDetector(
                        //   onTap: () async {
                        //     showDialog<void>(
                        //       context: context,
                        //       builder: (_) {
                        //         return StackDialogBase(
                        //           child: SizedBox(
                        //             width: 300,
                        //             child: Lottie.asset(
                        //               Assets.lottie.plain(Coin.bitcoincash),
                        //             ),
                        //           ),
                        //         );
                        //       },
                        //     );
                        //   },
                        //   child: RoundedWhiteContainer(
                        //     child: Text(
                        //       "Lottie test",
                        //       style: STextStyles.button(context).copyWith(
                        //           color: Theme.of(context)
                        //               .extension<StackColors>()!
                        //               .accentColorDark),
                        //     ),
                        //   ),
                        // ),
                      ],
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}
