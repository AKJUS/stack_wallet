/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../notifications/show_flush_bar.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/clipboard_interface.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';
import '../../../../wallets/isar/providers/wallet_info_provider.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/extended_keys_interface.dart';
import '../../../../widgets/background.dart';
import '../../../../widgets/conditional_parent.dart';
import '../../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../../widgets/custom_tab_view.dart';
import '../../../../widgets/desktop/desktop_dialog.dart';
import '../../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/desktop/secondary_button.dart';
import '../../../../widgets/detail_item.dart';
import '../../../../widgets/qr.dart';
import '../../../../widgets/rounded_white_container.dart';

class XPubView extends ConsumerWidget {
  const XPubView({
    super.key,
    required this.walletId,
    required this.xpubData,
    this.clipboardInterface = const ClipboardWrapper(),
  });

  final String walletId;
  final ClipboardInterface clipboardInterface;
  final ({List<XPub> xpubs, String fingerprint}) xpubData;

  static const String routeName = "/xpub";

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bool isDesktop = Util.isDesktop;

    return ConditionalParent(
      condition: !isDesktop,
      builder: (child) => Background(
        child: Scaffold(
          backgroundColor:
              Theme.of(context).extension<StackColors>()!.background,
          appBar: AppBar(
            leading: AppBarBackButton(
              onPressed: () async {
                Navigator.of(context).pop();
              },
            ),
            title: Text(
              "Wallet xpub(s)",
              style: STextStyles.navBarTitle(context),
            ),
          ),
          body: Padding(
            padding: const EdgeInsets.only(
              top: 12,
              left: 16,
              right: 16,
            ),
            child: SingleChildScrollView(child: child),
          ),
        ),
      ),
      child: ConditionalParent(
        condition: isDesktop,
        builder: (child) => DesktopDialog(
          maxWidth: 600,
          maxHeight: double.infinity,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Padding(
                    padding: const EdgeInsets.only(
                      left: 32,
                    ),
                    child: Text(
                      "${ref.watch(pWalletName(walletId))} xpub(s)",
                      style: STextStyles.desktopH2(context),
                    ),
                  ),
                  DesktopDialogCloseButton(
                    onPressedOverride: Navigator.of(
                      context,
                      rootNavigator: true,
                    ).pop,
                  ),
                ],
              ),
              Flexible(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(32, 0, 32, 32),
                  child: SingleChildScrollView(
                    child: child,
                  ),
                ),
              ),
            ],
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (isDesktop) const SizedBox(height: 16),
            DetailItem(
              title: "Master fingerprint",
              detail: xpubData.fingerprint,
              horizontal: true,
            ),
            if (isDesktop) const SizedBox(height: 16),
            CustomTabView(
              titles: xpubData.xpubs.map((e) => e.path).toList(),
              children: xpubData.xpubs
                  .map(
                    (e) => Padding(
                      padding: const EdgeInsets.only(top: 16),
                      child: _XPub(
                        xpub: e.xpub,
                        derivation: e.path,
                      ),
                    ),
                  )
                  .toList(),
            ),
          ],
        ),
      ),
    );
  }
}

class _XPub extends StatelessWidget {
  const _XPub({
    super.key,
    required this.xpub,
    required this.derivation,
    this.clipboardInterface = const ClipboardWrapper(),
  });

  final String xpub;
  final String derivation;

  final ClipboardInterface clipboardInterface;

  @override
  Widget build(BuildContext context) {
    final bool isDesktop = Util.isDesktop;

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const SizedBox(
          height: 25,
        ),
        ConditionalParent(
          condition: !isDesktop,
          builder: (child) => RoundedWhiteContainer(
            child: child,
          ),
          child: QR(
            data: xpub,
            size: isDesktop ? 280 : MediaQuery.of(context).size.width / 1.5,
          ),
        ),
        const SizedBox(height: 25),
        RoundedWhiteContainer(
          padding: const EdgeInsets.all(16),
          borderColor:
              Theme.of(context).extension<StackColors>()!.backgroundAppBar,
          child: SelectableText(
            xpub,
            style: STextStyles.largeMedium14(context),
          ),
        ),
        const SizedBox(height: 32),
        Row(
          children: [
            if (isDesktop)
              Expanded(
                child: SecondaryButton(
                  buttonHeight: ButtonHeight.xl,
                  label: "Cancel",
                  onPressed: Navigator.of(
                    context,
                    rootNavigator: true,
                  ).pop,
                ),
              ),
            if (isDesktop) const SizedBox(width: 16),
            Expanded(
              child: PrimaryButton(
                buttonHeight: ButtonHeight.xl,
                label: "Copy",
                onPressed: () async {
                  await clipboardInterface.setData(
                    ClipboardData(
                      text: xpub,
                    ),
                  );
                  if (context.mounted) {
                    unawaited(
                      showFloatingFlushBar(
                        type: FlushBarType.info,
                        message: "Copied to clipboard",
                        iconAsset: Assets.svg.copy,
                        context: context,
                      ),
                    );
                  }
                },
              ),
            ),
          ],
        ),
      ],
    );
  }
}
