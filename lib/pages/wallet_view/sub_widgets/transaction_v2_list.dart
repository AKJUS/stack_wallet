/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-10-19
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:isar/isar.dart';
import 'package:stackwallet/models/isar/models/blockchain_data/v2/transaction_v2.dart';
import 'package:stackwallet/models/isar/models/isar_models.dart';
import 'package:stackwallet/pages/exchange_view/trade_details_view.dart';
import 'package:stackwallet/pages/wallet_view/sub_widgets/no_transactions_found.dart';
import 'package:stackwallet/pages/wallet_view/sub_widgets/tx_icon.dart';
import 'package:stackwallet/pages/wallet_view/transaction_views/transaction_details_view.dart';
import 'package:stackwallet/pages/wallet_view/wallet_view.dart';
import 'package:stackwallet/providers/db/main_db_provider.dart';
import 'package:stackwallet/providers/global/locale_provider.dart';
import 'package:stackwallet/providers/global/prefs_provider.dart';
import 'package:stackwallet/providers/global/price_provider.dart';
import 'package:stackwallet/providers/global/trades_service_provider.dart';
import 'package:stackwallet/providers/global/wallets_provider.dart';
import 'package:stackwallet/route_generator.dart';
import 'package:stackwallet/themes/stack_colors.dart';
import 'package:stackwallet/utilities/amount/amount.dart';
import 'package:stackwallet/utilities/amount/amount_formatter.dart';
import 'package:stackwallet/utilities/constants.dart';
import 'package:stackwallet/utilities/enums/coin_enum.dart';
import 'package:stackwallet/utilities/format.dart';
import 'package:stackwallet/utilities/text_styles.dart';
import 'package:stackwallet/utilities/util.dart';
import 'package:stackwallet/widgets/desktop/desktop_dialog.dart';
import 'package:stackwallet/widgets/desktop/desktop_dialog_close_button.dart';
import 'package:stackwallet/widgets/loading_indicator.dart';
import 'package:stackwallet/widgets/trade_card.dart';
import 'package:tuple/tuple.dart';

class TransactionsV2List extends ConsumerStatefulWidget {
  const TransactionsV2List({
    Key? key,
    required this.walletId,
  }) : super(key: key);

  final String walletId;

  @override
  ConsumerState<TransactionsV2List> createState() => _TransactionsV2ListState();
}

class _TxListItem extends ConsumerWidget {
  const _TxListItem({
    super.key,
    required this.tx,
    this.radius,
    required this.coin,
  });

  final TransactionV2 tx;
  final BorderRadius? radius;
  final Coin coin;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final matchingTrades = ref
        .read(tradesServiceProvider)
        .trades
        .where((e) => e.payInTxid == tx.txid || e.payOutTxid == tx.txid);

    if (tx.type == TransactionType.outgoing && matchingTrades.isNotEmpty) {
      final trade = matchingTrades.first;
      return Container(
        decoration: BoxDecoration(
          color: Theme.of(context).extension<StackColors>()!.popupBG,
          borderRadius: radius,
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TransactionCardV2(
              key: UniqueKey(),
              transaction: tx,
            ),
            TradeCard(
              key: Key(tx.txid +
                  tx.type.name +
                  tx.hashCode.toString() +
                  trade.uuid), //
              trade: trade,
              onTap: () async {
                if (Util.isDesktop) {
                  await showDialog<void>(
                    context: context,
                    builder: (context) => Navigator(
                      initialRoute: TradeDetailsView.routeName,
                      onGenerateRoute: RouteGenerator.generateRoute,
                      onGenerateInitialRoutes: (_, __) {
                        return [
                          FadePageRoute(
                            DesktopDialog(
                              maxHeight: null,
                              maxWidth: 580,
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.only(
                                      left: 32,
                                      bottom: 16,
                                    ),
                                    child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          "Trade details",
                                          style: STextStyles.desktopH3(context),
                                        ),
                                        DesktopDialogCloseButton(
                                          onPressedOverride: Navigator.of(
                                            context,
                                            rootNavigator: true,
                                          ).pop,
                                        ),
                                      ],
                                    ),
                                  ),
                                  Flexible(
                                    child: TradeDetailsView(
                                      tradeId: trade.tradeId,
                                      // TODO
                                      // transactionIfSentFromStack: tx,
                                      transactionIfSentFromStack: null,
                                      walletName: ref.watch(
                                        walletsChangeNotifierProvider.select(
                                          (value) => value
                                              .getManager(tx.walletId)
                                              .walletName,
                                        ),
                                      ),
                                      walletId: tx.walletId,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            const RouteSettings(
                              name: TradeDetailsView.routeName,
                            ),
                          ),
                        ];
                      },
                    ),
                  );
                } else {
                  unawaited(
                    Navigator.of(context).pushNamed(
                      TradeDetailsView.routeName,
                      arguments: Tuple4(
                        trade.tradeId,
                        tx,
                        tx.walletId,
                        ref
                            .read(walletsChangeNotifierProvider)
                            .getManager(tx.walletId)
                            .walletName,
                      ),
                    ),
                  );
                }
              },
            )
          ],
        ),
      );
    } else {
      return Container(
        decoration: BoxDecoration(
          color: Theme.of(context).extension<StackColors>()!.popupBG,
          borderRadius: radius,
        ),
        child: TransactionCardV2(
          // this may mess with combined firo transactions
          key: UniqueKey(),
          transaction: tx,
        ),
      );
    }
  }
}

class _TransactionsV2ListState extends ConsumerState<TransactionsV2List> {
  bool _hasLoaded = false;
  List<TransactionV2> _transactions = [];

  BorderRadius get _borderRadiusFirst {
    return BorderRadius.only(
      topLeft: Radius.circular(
        Constants.size.circularBorderRadius,
      ),
      topRight: Radius.circular(
        Constants.size.circularBorderRadius,
      ),
    );
  }

  BorderRadius get _borderRadiusLast {
    return BorderRadius.only(
      bottomLeft: Radius.circular(
        Constants.size.circularBorderRadius,
      ),
      bottomRight: Radius.circular(
        Constants.size.circularBorderRadius,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final manager = ref.watch(walletsChangeNotifierProvider
        .select((value) => value.getManager(widget.walletId)));

    return FutureBuilder(
      future: ref
          .watch(mainDBProvider)
          .isar
          .transactionV2s
          .where()
          .walletIdEqualTo(widget.walletId)
          .sortByTimestampDesc()
          .findAll(),
      builder: (fbContext, AsyncSnapshot<List<TransactionV2>> snapshot) {
        if (snapshot.connectionState == ConnectionState.done &&
            snapshot.hasData) {
          _transactions = snapshot.data!;
          _hasLoaded = true;
        }
        if (!_hasLoaded) {
          return const Column(
            children: [
              Spacer(),
              Center(
                child: LoadingIndicator(
                  height: 50,
                  width: 50,
                ),
              ),
              Spacer(
                flex: 4,
              ),
            ],
          );
        }
        if (_transactions.isEmpty) {
          return const NoTransActionsFound();
        } else {
          _transactions.sort((a, b) => b.timestamp - a.timestamp);
          return RefreshIndicator(
            onRefresh: () async {
              final managerProvider = ref
                  .read(walletsChangeNotifierProvider)
                  .getManagerProvider(widget.walletId);
              if (!ref.read(managerProvider).isRefreshing) {
                unawaited(ref.read(managerProvider).refresh());
              }
            },
            child: Util.isDesktop
                ? ListView.separated(
                    shrinkWrap: true,
                    itemBuilder: (context, index) {
                      BorderRadius? radius;
                      if (_transactions.length == 1) {
                        radius = BorderRadius.circular(
                          Constants.size.circularBorderRadius,
                        );
                      } else if (index == _transactions.length - 1) {
                        radius = _borderRadiusLast;
                      } else if (index == 0) {
                        radius = _borderRadiusFirst;
                      }
                      final tx = _transactions[index];
                      return _TxListItem(
                        tx: tx,
                        coin: manager.coin,
                        radius: radius,
                      );
                    },
                    separatorBuilder: (context, index) {
                      return Container(
                        width: double.infinity,
                        height: 2,
                        color: Theme.of(context)
                            .extension<StackColors>()!
                            .background,
                      );
                    },
                    itemCount: _transactions.length,
                  )
                : ListView.builder(
                    itemCount: _transactions.length,
                    itemBuilder: (context, index) {
                      BorderRadius? radius;
                      bool shouldWrap = false;
                      if (_transactions.length == 1) {
                        radius = BorderRadius.circular(
                          Constants.size.circularBorderRadius,
                        );
                      } else if (index == _transactions.length - 1) {
                        radius = _borderRadiusLast;
                        shouldWrap = true;
                      } else if (index == 0) {
                        radius = _borderRadiusFirst;
                      }
                      final tx = _transactions[index];
                      if (shouldWrap) {
                        return Column(
                          children: [
                            _TxListItem(
                              tx: tx,
                              coin: manager.coin,
                              radius: radius,
                            ),
                            const SizedBox(
                              height: WalletView.navBarHeight + 14,
                            ),
                          ],
                        );
                      } else {
                        return _TxListItem(
                          tx: tx,
                          coin: manager.coin,
                          radius: radius,
                        );
                      }
                    },
                  ),
          );
        }
      },
    );
  }
}

class TransactionCardV2 extends ConsumerStatefulWidget {
  const TransactionCardV2({
    Key? key,
    required this.transaction,
  }) : super(key: key);

  final TransactionV2 transaction;

  @override
  ConsumerState<TransactionCardV2> createState() => _TransactionCardStateV2();
}

class _TransactionCardStateV2 extends ConsumerState<TransactionCardV2> {
  late final TransactionV2 _transaction;
  late final String walletId;
  late final String prefix;
  late final String unit;
  late final Coin coin;
  late final TransactionType txType;

  String whatIsIt(
    Coin coin,
    int currentHeight,
  ) {
    final confirmedStatus = _transaction.isConfirmed(
      currentHeight,
      coin.requiredConfirmations,
    );

    if (_transaction.subType == TransactionSubType.cashFusion) {
      if (confirmedStatus) {
        return "Anonymized";
      } else {
        return "Anonymizing";
      }
    }

    if (_transaction.type == TransactionType.incoming) {
      // if (_transaction.isMinting) {
      //   return "Minting";
      // } else
      if (confirmedStatus) {
        return "Received";
      } else {
        return "Receiving";
      }
    } else if (_transaction.type == TransactionType.outgoing) {
      if (confirmedStatus) {
        return "Sent";
      } else {
        return "Sending";
      }
    } else if (_transaction.type == TransactionType.sentToSelf) {
      return "Sent to self";
    } else {
      return _transaction.type.name;
    }
  }

  @override
  void initState() {
    _transaction = widget.transaction;
    walletId = _transaction.walletId;

    if (Util.isDesktop) {
      if (_transaction.type == TransactionType.outgoing &&
          _transaction.subType != TransactionSubType.cashFusion) {
        prefix = "-";
      } else if (_transaction.type == TransactionType.incoming) {
        prefix = "+";
      } else {
        prefix = "";
      }
    } else {
      prefix = "";
    }
    coin = ref.read(walletsChangeNotifierProvider).getManager(walletId).coin;

    unit = coin.ticker;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final locale = ref.watch(
        localeServiceChangeNotifierProvider.select((value) => value.locale));

    final baseCurrency = ref
        .watch(prefsChangeNotifierProvider.select((value) => value.currency));

    final price = ref
        .watch(priceAnd24hChangeNotifierProvider
            .select((value) => value.getPrice(coin)))
        .item1;

    final currentHeight = ref.watch(walletsChangeNotifierProvider
        .select((value) => value.getManager(walletId).currentHeight));

    final Amount amount;

    if (_transaction.subType == TransactionSubType.cashFusion) {
      amount = _transaction.getAmountReceivedThisWallet(coin: coin);
    } else {
      switch (_transaction.type) {
        case TransactionType.outgoing:
          amount = _transaction.getAmountSentFromThisWallet(coin: coin);
          break;

        case TransactionType.incoming:
        case TransactionType.sentToSelf:
          amount = _transaction.getAmountReceivedThisWallet(coin: coin);
          break;

        case TransactionType.unknown:
          amount = _transaction.getAmountSentFromThisWallet(coin: coin);
          break;
      }
    }

    return Material(
      color: Theme.of(context).extension<StackColors>()!.popupBG,
      elevation: 0,
      shape: RoundedRectangleBorder(
        borderRadius:
            BorderRadius.circular(Constants.size.circularBorderRadius),
      ),
      child: Padding(
        padding: const EdgeInsets.all(6),
        child: RawMaterialButton(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              Constants.size.circularBorderRadius,
            ),
          ),
          onPressed: () async {
            if (Util.isDesktop) {
              // TODO
              // await showDialog<void>(
              //   context: context,
              //   builder: (context) => DesktopDialog(
              //     maxHeight: MediaQuery.of(context).size.height - 64,
              //     maxWidth: 580,
              //     child: TransactionDetailsView(
              //       transaction: _transaction,
              //       coin: coin,
              //       walletId: walletId,
              //     ),
              //   ),
              // );
            } else {
              unawaited(
                Navigator.of(context).pushNamed(
                  TransactionDetailsView.routeName,
                  arguments: Tuple3(
                    _transaction,
                    coin,
                    walletId,
                  ),
                ),
              );
            }
          },
          child: Padding(
            padding: const EdgeInsets.all(8),
            child: Row(
              children: [
                TxIcon(
                  transaction: _transaction,
                  coin: coin,
                  currentHeight: currentHeight,
                ),
                const SizedBox(
                  width: 14,
                ),
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    // crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Flexible(
                            child: FittedBox(
                              fit: BoxFit.scaleDown,
                              child: Text(
                                whatIsIt(
                                  coin,
                                  currentHeight,
                                ),
                                style: STextStyles.itemSubtitle12(context),
                              ),
                            ),
                          ),
                          const SizedBox(
                            width: 10,
                          ),
                          Flexible(
                            child: FittedBox(
                              fit: BoxFit.scaleDown,
                              child: Builder(
                                builder: (_) {
                                  return Text(
                                    "$prefix${ref.watch(pAmountFormatter(coin)).format(amount)}",
                                    style: STextStyles.itemSubtitle12(context),
                                  );
                                },
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 4,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        // crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          Flexible(
                            child: FittedBox(
                              fit: BoxFit.scaleDown,
                              child: Text(
                                Format.extractDateFrom(_transaction.timestamp),
                                style: STextStyles.label(context),
                              ),
                            ),
                          ),
                          if (ref.watch(prefsChangeNotifierProvider
                              .select((value) => value.externalCalls)))
                            const SizedBox(
                              width: 10,
                            ),
                          if (ref.watch(prefsChangeNotifierProvider
                              .select((value) => value.externalCalls)))
                            Flexible(
                              child: FittedBox(
                                fit: BoxFit.scaleDown,
                                child: Builder(
                                  builder: (_) {
                                    return Text(
                                      "$prefix${Amount.fromDecimal(
                                        amount.decimal * price,
                                        fractionDigits: 2,
                                      ).fiatString(
                                        locale: locale,
                                      )} $baseCurrency",
                                      style: STextStyles.label(context),
                                    );
                                  },
                                ),
                              ),
                            ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
