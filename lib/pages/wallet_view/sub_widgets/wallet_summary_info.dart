/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';

import '../../../providers/providers.dart';
import '../../../providers/wallet/public_private_balance_state_provider.dart';
import '../../../providers/wallet/wallet_balance_toggle_state_provider.dart';
import '../../../services/event_bus/events/global/wallet_sync_status_changed_event.dart';
import '../../../themes/coin_icon_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/amount/amount.dart';
import '../../../utilities/amount/amount_formatter.dart';
import '../../../utilities/assets.dart';
import '../../../utilities/enums/wallet_balance_toggle_state.dart';
import '../../../utilities/extensions/extensions.dart';
import '../../../utilities/text_styles.dart';
import '../../../wallets/crypto_currency/coins/banano.dart';
import '../../../wallets/isar/providers/wallet_info_provider.dart';
import '../../../wallets/wallet/impl/banano_wallet.dart';
import '../../../wallets/wallet/impl/firo_wallet.dart';
import '../../../widgets/conditional_parent.dart';
import 'wallet_balance_toggle_sheet.dart';
import 'wallet_refresh_button.dart';

class WalletSummaryInfo extends ConsumerWidget {
  const WalletSummaryInfo({
    super.key,
    required this.walletId,
    required this.initialSyncStatus,
  });

  final String walletId;
  final WalletSyncStatus initialSyncStatus;

  void showSheet(BuildContext context, WidgetRef ref) {
    final wallet =
        ref.watch(pWallets.select((value) => value.getWallet(walletId)));
    final firoWallet = wallet as FiroWallet;
    final availableBalances = getAvailableBalances(firoWallet);

    // Remove any elements whose balance is zero.
    availableBalances.removeWhere((element) {
      switch (element) {
        case FiroType.spark:
          return firoWallet.info.cachedBalanceTertiary.spendable.raw ==
              BigInt.zero;
        case FiroType.lelantus:
          return firoWallet.info.cachedBalanceSecondary.spendable.raw ==
              BigInt.zero;
        case FiroType.public:
          return firoWallet.info.cachedBalance.spendable.raw == BigInt.zero;
      }
    });

    if (availableBalances.length <= 2) {
      final state = ref.read(publicPrivateBalanceStateProvider.state).state;
      final newState = availableBalances.firstWhere(
          (balanceType) => balanceType != state,
          orElse: () => availableBalances.first);
      ref.read(publicPrivateBalanceStateProvider.state).state = newState;
      return;
    }

    showModalBottomSheet<dynamic>(
      backgroundColor: Colors.transparent,
      context: context,
      useSafeArea: true,
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      builder: (_) => WalletBalanceToggleSheet(walletId: walletId),
    );
  }

  List<FiroType> getAvailableBalances(FiroWallet firoWallet) {
    final List<FiroType> availableBalances = [];
    if (firoWallet.info.cachedBalanceTertiary.spendable.raw > BigInt.zero) {
      availableBalances.add(FiroType.spark);
    }
    if (firoWallet.info.cachedBalanceSecondary.spendable.raw > BigInt.zero) {
      availableBalances.add(FiroType.lelantus);
    }
    if (firoWallet.info.cachedBalance.spendable.raw > BigInt.zero) {
      availableBalances.add(FiroType.public);
    }
    return availableBalances;
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    debugPrint("BUILD: $runtimeType");

    final externalCalls = ref.watch(
      prefsChangeNotifierProvider.select((value) => value.externalCalls),
    );
    final coin = ref.watch(pWalletCoin(walletId));
    final balance = ref.watch(pWalletBalance(walletId));

    final locale = ref.watch(
      localeServiceChangeNotifierProvider.select((value) => value.locale),
    );

    final baseCurrency = ref
        .watch(prefsChangeNotifierProvider.select((value) => value.currency));

    final priceTuple = ref.watch(
      priceAnd24hChangeNotifierProvider.select((value) => value.getPrice(coin)),
    );

    final _showAvailable =
        ref.watch(walletBalanceToggleStateProvider.state).state ==
            WalletBalanceToggleState.available;

    final Amount balanceToShow;
    final String title;
    final wallet =
        ref.watch(pWallets.select((value) => value.getWallet(walletId)));
    List<FiroType> availableBalances = [];

    if (wallet is FiroWallet) {
      availableBalances = getAvailableBalances(wallet);

      final type = ref.watch(publicPrivateBalanceStateProvider.state).state;
      title =
          "${_showAvailable ? "Available" : "Full"} ${type.name.capitalize()} balance";
      switch (type) {
        case FiroType.spark:
          final balance = ref.watch(pWalletBalanceTertiary(walletId));
          balanceToShow = _showAvailable ? balance.spendable : balance.total;
          break;

        case FiroType.lelantus:
          final balance = ref.watch(pWalletBalanceSecondary(walletId));
          balanceToShow = _showAvailable ? balance.spendable : balance.total;
          break;

        case FiroType.public:
          final balance = ref.watch(pWalletBalance(walletId));
          balanceToShow = _showAvailable ? balance.spendable : balance.total;
          break;
      }
    } else {
      balanceToShow = _showAvailable ? balance.spendable : balance.total;
      title = _showAvailable ? "Available balance" : "Full balance";
    }

    List<int>? imageBytes;

    if (coin is Banano) {
      imageBytes = (ref.watch(pWallets).getWallet(walletId) as BananoWallet)
          .getMonkeyImageBytes();
    }

    return ConditionalParent(
      condition: imageBytes != null,
      builder: (child) => Stack(
        children: [
          Positioned.fill(
            left: 150.0,
            child: SvgPicture.memory(
              Uint8List.fromList(imageBytes!),
            ),
          ),
          child,
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                GestureDetector(
                  onTap: availableBalances.length > 1
                      ? () => showSheet(context, ref)
                      : null,
                  child: Row(
                    children: [
                      Text(
                        title,
                        style: STextStyles.subtitle500(context).copyWith(
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textFavoriteCard,
                        ),
                      ),
                      if (availableBalances.length > 1) ...[
                        const SizedBox(
                          width: 4,
                        ),
                        SvgPicture.asset(
                          Assets.svg.chevronDown,
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textFavoriteCard,
                          width: 8,
                          height: 4,
                        ),
                      ],
                    ],
                  ),
                ),
                const Spacer(),
                FittedBox(
                  fit: BoxFit.scaleDown,
                  child: SelectableText(
                    ref.watch(pAmountFormatter(coin)).format(balanceToShow),
                    style: STextStyles.pageTitleH1(context).copyWith(
                      fontSize: 24,
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .textFavoriteCard,
                    ),
                  ),
                ),
                if (externalCalls)
                  Text(
                    "${(priceTuple.item1 * balanceToShow.decimal).toAmount(
                          fractionDigits: 2,
                        ).fiatString(
                          locale: locale,
                        )} $baseCurrency",
                    style: STextStyles.subtitle500(context).copyWith(
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .textFavoriteCard,
                    ),
                  ),
              ],
            ),
          ),
          Column(
            children: [
              SvgPicture.file(
                File(
                  ref.watch(coinIconProvider(coin)),
                ),
                width: 24,
                height: 24,
              ),
              const Spacer(),
              WalletRefreshButton(
                walletId: walletId,
                initialSyncStatus: initialSyncStatus,
              ),
            ],
          ),
        ],
      ),
    );
  }
}
