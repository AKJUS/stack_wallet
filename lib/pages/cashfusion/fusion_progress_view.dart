/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by julian on 2023-10-16
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:stackwallet/pages/settings_views/global_settings_view/stack_backup_views/sub_widgets/restoring_item_card.dart';
import 'package:stackwallet/pages_desktop_specific/cashfusion/sub_widgets/fusion_dialog.dart';
import 'package:stackwallet/providers/cash_fusion/fusion_progress_ui_state_provider.dart';
import 'package:stackwallet/themes/stack_colors.dart';
import 'package:stackwallet/utilities/assets.dart';
import 'package:stackwallet/utilities/text_styles.dart';
import 'package:stackwallet/widgets/background.dart';
import 'package:stackwallet/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:stackwallet/widgets/desktop/secondary_button.dart';
import 'package:stackwallet/widgets/rounded_container.dart';

class FusionProgressView extends StatefulWidget {
  const FusionProgressView({
    super.key,
    required this.walletId,
  });

  static const routeName = "/cashFusionProgressView";

  final String walletId;

  @override
  State<FusionProgressView> createState() => _FusionProgressViewState();
}

class _FusionProgressViewState extends State<FusionProgressView> {
  Widget _getIconForState(CashFusionStatus state) {
    switch (state) {
      case CashFusionStatus.waiting:
        return SvgPicture.asset(
          Assets.svg.loader,
          color:
              Theme.of(context).extension<StackColors>()!.buttonBackSecondary,
        );
      case CashFusionStatus.running:
        return SvgPicture.asset(
          Assets.svg.loader,
          color: Theme.of(context).extension<StackColors>()!.accentColorGreen,
        );
      case CashFusionStatus.success:
        return SvgPicture.asset(
          Assets.svg.checkCircle,
          color: Theme.of(context).extension<StackColors>()!.accentColorGreen,
        );
      case CashFusionStatus.failed:
        return SvgPicture.asset(
          Assets.svg.circleAlert,
          color: Theme.of(context).extension<StackColors>()!.textError,
        );
    }
  }

  /// return true on will cancel, false if cancel cancelled
  Future<bool> _requestCancel() async {
    //

    return false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        return await _requestCancel();
      },
      child: Background(
        child: SafeArea(
          child: Scaffold(
            backgroundColor:
                Theme.of(context).extension<StackColors>()!.background,
            appBar: AppBar(
              automaticallyImplyLeading: false,
              leading: AppBarBackButton(
                onPressed: () async {
                  if (await _requestCancel()) {
                    if (mounted) {
                      Navigator.of(context).pop();
                    }
                  }
                },
              ),
              title: Text(
                "Fusion progress",
                style: STextStyles.navBarTitle(context),
              ),
              titleSpacing: 0,
            ),
            body: LayoutBuilder(
              builder: (builderContext, constraints) {
                return SingleChildScrollView(
                  child: ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight: constraints.maxHeight,
                    ),
                    child: IntrinsicHeight(
                      child: Padding(
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          children: [
                            RoundedContainer(
                              color: Theme.of(context)
                                  .extension<StackColors>()!
                                  .snackBarBackError,
                              child: Text(
                                "Do not close this window. If you exit, "
                                "the process will be canceled.",
                                style: STextStyles.smallMed14(context).copyWith(
                                  color: Theme.of(context)
                                      .extension<StackColors>()!
                                      .snackBarTextError,
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ),
                            const SizedBox(
                              height: 20,
                            ),
                            Consumer(
                              builder: (_, ref, __) {
                                final state = ref.watch(
                                    fusionProgressUIStateProvider(
                                            widget.walletId)
                                        .select((value) => value.connecting));
                                return RoundedContainer(
                                  padding: EdgeInsets.zero,
                                  color: Theme.of(context)
                                      .extension<StackColors>()!
                                      .popupBG,
                                  borderColor: Theme.of(context)
                                      .extension<StackColors>()!
                                      .background,
                                  child: RestoringItemCard(
                                    left: SizedBox(
                                      width: 32,
                                      height: 32,
                                      child: RoundedContainer(
                                        padding: const EdgeInsets.all(0),
                                        color: Theme.of(context)
                                            .extension<StackColors>()!
                                            .buttonBackSecondary,
                                        child: Center(
                                          child: SvgPicture.asset(
                                            Assets.svg.node,
                                            width: 16,
                                            height: 16,
                                          ),
                                        ),
                                      ),
                                    ),
                                    right: SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: _getIconForState(state),
                                    ),
                                    title: "Connecting to server",
                                  ),
                                );
                              },
                            ),
                            const SizedBox(
                              height: 12,
                            ),
                            Consumer(builder: (_, ref, __) {
                              final state = ref.watch(
                                  fusionProgressUIStateProvider(widget.walletId)
                                      .select((value) => value.outputs));
                              return RoundedContainer(
                                padding: EdgeInsets.zero,
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .popupBG,
                                borderColor: Theme.of(context)
                                    .extension<StackColors>()!
                                    .background,
                                child: RestoringItemCard(
                                  left: SizedBox(
                                    width: 32,
                                    height: 32,
                                    child: RoundedContainer(
                                      padding: const EdgeInsets.all(0),
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .buttonBackSecondary,
                                      child: Center(
                                        child: SvgPicture.asset(
                                          Assets.svg.upFromLine,
                                          width: 18,
                                          height: 18,
                                        ),
                                      ),
                                    ),
                                  ),
                                  right: SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: _getIconForState(state),
                                  ),
                                  title: "Allocating outputs",
                                ),
                              );
                            }),
                            const SizedBox(
                              height: 12,
                            ),
                            Consumer(builder: (_, ref, __) {
                              final state = ref.watch(
                                  fusionProgressUIStateProvider(widget.walletId)
                                      .select((value) => value.peers));
                              return RoundedContainer(
                                padding: EdgeInsets.zero,
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .popupBG,
                                borderColor: Theme.of(context)
                                    .extension<StackColors>()!
                                    .background,
                                child: RestoringItemCard(
                                  left: SizedBox(
                                    width: 32,
                                    height: 32,
                                    child: RoundedContainer(
                                      padding: const EdgeInsets.all(0),
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .buttonBackSecondary,
                                      child: Center(
                                        child: SvgPicture.asset(
                                          Assets.svg.peers,
                                          width: 20,
                                          height: 20,
                                        ),
                                      ),
                                    ),
                                  ),
                                  right: SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: _getIconForState(state),
                                  ),
                                  title: "Waiting for peers",
                                ),
                              );
                            }),
                            const SizedBox(
                              height: 12,
                            ),
                            Consumer(builder: (_, ref, __) {
                              final state = ref.watch(
                                  fusionProgressUIStateProvider(widget.walletId)
                                      .select((value) => value.fusing));
                              return RoundedContainer(
                                padding: EdgeInsets.zero,
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .popupBG,
                                borderColor: Theme.of(context)
                                    .extension<StackColors>()!
                                    .background,
                                child: RestoringItemCard(
                                  left: SizedBox(
                                    width: 32,
                                    height: 32,
                                    child: RoundedContainer(
                                      padding: const EdgeInsets.all(0),
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .buttonBackSecondary,
                                      child: Center(
                                        child: SvgPicture.asset(
                                          Assets.svg.fusing,
                                          width: 20,
                                          height: 20,
                                        ),
                                      ),
                                    ),
                                  ),
                                  right: SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: _getIconForState(state),
                                  ),
                                  title: "Fusing",
                                ),
                              );
                            }),
                            const SizedBox(
                              height: 12,
                            ),
                            Consumer(builder: (_, ref, __) {
                              final state = ref.watch(
                                  fusionProgressUIStateProvider(widget.walletId)
                                      .select((value) => value.complete));
                              return RoundedContainer(
                                padding: EdgeInsets.zero,
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .popupBG,
                                borderColor: Theme.of(context)
                                    .extension<StackColors>()!
                                    .shadow,
                                child: RestoringItemCard(
                                  left: SizedBox(
                                    width: 32,
                                    height: 32,
                                    child: RoundedContainer(
                                      padding: const EdgeInsets.all(0),
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .buttonBackSecondary,
                                      child: Center(
                                        child: SvgPicture.asset(
                                          Assets.svg.checkCircle,
                                          width: 18,
                                          height: 18,
                                        ),
                                      ),
                                    ),
                                  ),
                                  right: SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: _getIconForState(state),
                                  ),
                                  title: "Complete",
                                ),
                              );
                            }),
                            const Spacer(),
                            const SizedBox(
                              height: 16,
                            ),
                            // TODO: various button states
                            // tempt only show cancel button
                            SecondaryButton(
                              label: "Cancel",
                              onPressed: () async {
                                if (await _requestCancel()) {
                                  if (mounted) {
                                    Navigator.of(context).pop();
                                  }
                                }
                              },
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}
