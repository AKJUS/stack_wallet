/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../../pages/settings_views/global_settings_view/advanced_views/manage_coin_units/manage_coin_units_view.dart';
import '../../../../providers/global/prefs_provider.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';
import '../../../../widgets/custom_buttons/draggable_switch_button.dart';
import '../../../../widgets/desktop/desktop_dialog.dart';
import '../../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/desktop/secondary_button.dart';
import '../../../../widgets/rounded_white_container.dart';
import '../../../../widgets/stack_dialog.dart';
import 'debug_info_dialog.dart';
import 'desktop_manage_block_explorers_dialog.dart';
import 'stack_privacy_dialog.dart';

class AdvancedSettings extends ConsumerStatefulWidget {
  const AdvancedSettings({super.key});

  static const String routeName = "/settingsMenuAdvanced";

  @override
  ConsumerState<AdvancedSettings> createState() => _AdvancedSettings();
}

class _AdvancedSettings extends ConsumerState<AdvancedSettings> {
  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    final reuseAddress = ref.watch(prefsChangeNotifierProvider.select(
      (value) => value.reuseAddress,
    ));

    return SingleChildScrollView(
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.only(
              right: 30,
            ),
            child: RoundedWhiteContainer(
              radiusMultiplier: 2,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: SvgPicture.asset(
                      Assets.svg.circleSliders,
                      width: 48,
                      height: 48,
                    ),
                  ),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: RichText(
                          textAlign: TextAlign.start,
                          text: TextSpan(
                            children: [
                              TextSpan(
                                text: "Advanced",
                                style: STextStyles.desktopTextSmall(context),
                              ),
                              TextSpan(
                                text:
                                    "\n\nConfigure these settings only if you know what you are doing!",
                                style: STextStyles.desktopTextExtraExtraSmall(
                                  context,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(
                          thickness: 0.5,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Toggle testnet coins",
                              style: STextStyles.desktopTextExtraSmall(context)
                                  .copyWith(
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .textDark,
                              ),
                              textAlign: TextAlign.left,
                            ),
                            SizedBox(
                              height: 20,
                              width: 40,
                              child: DraggableSwitchButton(
                                isOn: ref.watch(
                                  prefsChangeNotifierProvider.select(
                                    (value) => value.showTestNetCoins,
                                  ),
                                ),
                                onValueChanged: (newValue) {
                                  ref
                                      .read(prefsChangeNotifierProvider)
                                      .showTestNetCoins = newValue;
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(
                          thickness: 0.5,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Enable coin control",
                              style: STextStyles.desktopTextExtraSmall(context)
                                  .copyWith(
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .textDark,
                              ),
                              textAlign: TextAlign.left,
                            ),
                            SizedBox(
                              height: 20,
                              width: 40,
                              child: DraggableSwitchButton(
                                isOn: ref.watch(
                                  prefsChangeNotifierProvider.select(
                                    (value) => value.enableCoinControl,
                                  ),
                                ),
                                onValueChanged: (newValue) {
                                  ref
                                      .read(prefsChangeNotifierProvider)
                                      .enableCoinControl = newValue;
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      // reuseAddress pref.
                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(
                          thickness: 0.5,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Reuse addresses",
                              style: STextStyles.desktopTextExtraSmall(context)
                                  .copyWith(
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .textDark,
                              ),
                              textAlign: TextAlign.left,
                            ),
                            SizedBox(
                              height: 20,
                              width: 40,
                              child: DraggableSwitchButton(
                                isOn: reuseAddress,
                                onValueChanged: (newValue) {
                                  if (newValue) {
                                    showDialog(
                                      context: context,
                                      builder: (context) {
                                        final isDesktop = Util.isDesktop;
                                        return isDesktop
                                            ? DesktopDialog(
                                                maxWidth: 576,
                                                child: Column(
                                                  mainAxisSize:
                                                      MainAxisSize.min,
                                                  children: [
                                                    Row(
                                                      mainAxisAlignment:
                                                          MainAxisAlignment
                                                              .spaceBetween,
                                                      children: [
                                                        Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .only(
                                                                  left: 32),
                                                          child: Text(
                                                            "Warning!",
                                                            style: STextStyles
                                                                .desktopH3(
                                                                    context),
                                                          ),
                                                        ),
                                                        const DesktopDialogCloseButton(),
                                                      ],
                                                    ),
                                                    Padding(
                                                      padding:
                                                          const EdgeInsets.only(
                                                        top: 8,
                                                        left: 32,
                                                        right: 32,
                                                        bottom: 32,
                                                      ),
                                                      child: Column(
                                                        mainAxisSize:
                                                            MainAxisSize.min,
                                                        children: [
                                                          Text(
                                                            "Reusing addresses reduces your privacy and security. Are you sure you want to reuse addresses by default?",
                                                            style: STextStyles
                                                                .desktopTextSmall(
                                                                    context),
                                                          ),
                                                          const SizedBox(
                                                            height: 43,
                                                          ),
                                                          Row(
                                                            children: [
                                                              Expanded(
                                                                child:
                                                                    SecondaryButton(
                                                                  buttonHeight:
                                                                      ButtonHeight
                                                                          .l,
                                                                  onPressed:
                                                                      () {
                                                                    Navigator.of(
                                                                            context)
                                                                        .pop();
                                                                  },
                                                                  label:
                                                                      "Cancel",
                                                                ),
                                                              ),
                                                              const SizedBox(
                                                                width: 16,
                                                              ),
                                                              Expanded(
                                                                child:
                                                                    PrimaryButton(
                                                                  buttonHeight:
                                                                      ButtonHeight
                                                                          .l,
                                                                  onPressed:
                                                                      () {
                                                                    ref.read(prefsChangeNotifierProvider).reuseAddress =
                                                                        newValue;
                                                                    Navigator.of(
                                                                            context)
                                                                        .pop();
                                                                  },
                                                                  label:
                                                                      "Continue",
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ],
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              )
                                            : WillPopScope(
                                                onWillPop: () async {
                                                  return true;
                                                },
                                                child: StackDialog(
                                                  title: "Warning!",
                                                  message:
                                                      "Reusing addresses reduces your privacy and security. Are you sure you want to reuse addresses by default?",
                                                  leftButton: TextButton(
                                                    style: Theme.of(context)
                                                        .extension<
                                                            StackColors>()!
                                                        .getSecondaryEnabledButtonStyle(
                                                            context),
                                                    child: Text(
                                                      "Cancel",
                                                      style: STextStyles
                                                          .itemSubtitle12(
                                                              context),
                                                    ),
                                                    onPressed: () {
                                                      Navigator.of(context)
                                                          .pop();
                                                    },
                                                  ),
                                                  rightButton: TextButton(
                                                    style: Theme.of(context)
                                                        .extension<
                                                            StackColors>()!
                                                        .getPrimaryEnabledButtonStyle(
                                                            context),
                                                    child: Text(
                                                      "Continue",
                                                      style: STextStyles.button(
                                                          context),
                                                    ),
                                                    onPressed: () {
                                                      ref
                                                          .read(
                                                              prefsChangeNotifierProvider)
                                                          .reuseAddress = newValue;
                                                      Navigator.of(context)
                                                          .pop();
                                                    },
                                                  ),
                                                ),
                                              );
                                      },
                                    ).then((confirmed) {
                                      if (confirmed == true) {
                                        ref
                                            .read(prefsChangeNotifierProvider)
                                            .reuseAddress = true;
                                      } else {
                                        ref
                                            .read(prefsChangeNotifierProvider)
                                            .reuseAddress = false;
                                      }
                                    });
                                  } else {
                                    ref
                                        .read(
                                          prefsChangeNotifierProvider,
                                        )
                                        .reuseAddress = newValue;
                                  }
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(
                          thickness: 0.5,
                        ),
                      ),

                      /// TODO: Make a dialog popup
                      Consumer(
                        builder: (_, ref, __) {
                          final externalCalls = ref.watch(
                            prefsChangeNotifierProvider
                                .select((value) => value.externalCalls),
                          );
                          return Padding(
                            padding: const EdgeInsets.all(10),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      "Stack Experience",
                                      style: STextStyles.desktopTextExtraSmall(
                                        context,
                                      ).copyWith(
                                        color: Theme.of(context)
                                            .extension<StackColors>()!
                                            .textDark,
                                      ),
                                      textAlign: TextAlign.left,
                                    ),
                                    Text(
                                      externalCalls
                                          ? "Easy crypto"
                                          : "Incognito",
                                      style: STextStyles
                                          .desktopTextExtraExtraSmall(
                                        context,
                                      ),
                                    ),
                                  ],
                                ),
                                PrimaryButton(
                                  label: "Change",
                                  buttonHeight: ButtonHeight.xs,
                                  width: 101,
                                  onPressed: () async {
                                    await showDialog<dynamic>(
                                      context: context,
                                      useSafeArea: false,
                                      barrierDismissible: true,
                                      builder: (context) {
                                        return const StackPrivacyDialog();
                                      },
                                    );
                                  },
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                    ],
                  ),
                  const Padding(
                    padding: EdgeInsets.all(10.0),
                    child: Divider(
                      thickness: 0.5,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Block explorers",
                          style: STextStyles.desktopTextExtraSmall(context)
                              .copyWith(
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textDark,
                          ),
                          textAlign: TextAlign.left,
                        ),
                        PrimaryButton(
                          buttonHeight: ButtonHeight.xs,
                          label: "Edit",
                          width: 101,
                          onPressed: () async {
                            await showDialog<dynamic>(
                              context: context,
                              useSafeArea: false,
                              barrierDismissible: true,
                              builder: (context) {
                                return const DesktopManageBlockExplorersDialog();
                              },
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.all(10.0),
                    child: Divider(
                      thickness: 0.5,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Units",
                          style: STextStyles.desktopTextExtraSmall(context)
                              .copyWith(
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textDark,
                          ),
                          textAlign: TextAlign.left,
                        ),
                        PrimaryButton(
                          buttonHeight: ButtonHeight.xs,
                          label: "Edit",
                          width: 101,
                          onPressed: () async {
                            await showDialog<dynamic>(
                              context: context,
                              useSafeArea: false,
                              barrierDismissible: true,
                              builder: (context) {
                                return const ManageCoinUnitsView();
                              },
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.all(10.0),
                    child: Divider(
                      thickness: 0.5,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Debug info",
                          style: STextStyles.desktopTextExtraSmall(context)
                              .copyWith(
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textDark,
                          ),
                          textAlign: TextAlign.left,
                        ),
                        PrimaryButton(
                          buttonHeight: ButtonHeight.xs,
                          label: "Show logs",
                          width: 101,
                          onPressed: () async {
                            await showDialog<dynamic>(
                              context: context,
                              useSafeArea: false,
                              barrierDismissible: true,
                              builder: (context) {
                                return const DebugInfoDialog();
                              },
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
