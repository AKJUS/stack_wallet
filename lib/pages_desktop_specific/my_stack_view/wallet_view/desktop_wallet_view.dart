/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';
import 'dart:io';

import 'package:event_bus/event_bus.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';
import 'package:stackwallet/pages/add_wallet_views/add_token_view/edit_wallet_tokens_view.dart';
import 'package:stackwallet/pages/token_view/my_tokens_view.dart';
import 'package:stackwallet/pages/wallet_view/sub_widgets/transactions_list.dart';
import 'package:stackwallet/pages/wallet_view/transaction_views/all_transactions_view.dart';
import 'package:stackwallet/pages/wallet_view/transaction_views/tx_v2/all_transactions_v2_view.dart';
import 'package:stackwallet/pages/wallet_view/transaction_views/tx_v2/transaction_v2_list.dart';
import 'package:stackwallet/pages_desktop_specific/my_stack_view/wallet_view/sub_widgets/desktop_wallet_features.dart';
import 'package:stackwallet/pages_desktop_specific/my_stack_view/wallet_view/sub_widgets/desktop_wallet_summary.dart';
import 'package:stackwallet/pages_desktop_specific/my_stack_view/wallet_view/sub_widgets/my_wallet.dart';
import 'package:stackwallet/pages_desktop_specific/my_stack_view/wallet_view/sub_widgets/network_info_button.dart';
import 'package:stackwallet/pages_desktop_specific/my_stack_view/wallet_view/sub_widgets/wallet_keys_button.dart';
import 'package:stackwallet/pages_desktop_specific/my_stack_view/wallet_view/sub_widgets/wallet_options_button.dart';
import 'package:stackwallet/providers/global/active_wallet_provider.dart';
import 'package:stackwallet/providers/global/auto_swb_service_provider.dart';
import 'package:stackwallet/providers/providers.dart';
import 'package:stackwallet/providers/ui/transaction_filter_provider.dart';
import 'package:stackwallet/services/event_bus/events/global/wallet_sync_status_changed_event.dart';
import 'package:stackwallet/services/event_bus/global_event_bus.dart';
import 'package:stackwallet/themes/coin_icon_provider.dart';
import 'package:stackwallet/themes/stack_colors.dart';
import 'package:stackwallet/utilities/assets.dart';
import 'package:stackwallet/utilities/enums/backup_frequency_type.dart';
import 'package:stackwallet/utilities/enums/sync_type_enum.dart';
import 'package:stackwallet/utilities/text_styles.dart';
import 'package:stackwallet/wallets/isar/providers/wallet_info_provider.dart';
import 'package:stackwallet/wallets/wallet/impl/banano_wallet.dart';
import 'package:stackwallet/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:stackwallet/widgets/custom_buttons/blue_text_button.dart';
import 'package:stackwallet/widgets/desktop/desktop_app_bar.dart';
import 'package:stackwallet/widgets/desktop/desktop_scaffold.dart';
import 'package:stackwallet/widgets/hover_text_field.dart';
import 'package:stackwallet/widgets/rounded_white_container.dart';

/// [eventBus] should only be set during testing
class DesktopWalletView extends ConsumerStatefulWidget {
  const DesktopWalletView({
    Key? key,
    required this.walletId,
    this.eventBus,
  }) : super(key: key);

  static const String routeName = "/desktopWalletView";

  final String walletId;
  final EventBus? eventBus;

  @override
  ConsumerState<DesktopWalletView> createState() => _DesktopWalletViewState();
}

class _DesktopWalletViewState extends ConsumerState<DesktopWalletView> {
  static const double sendReceiveColumnWidth = 460;

  late final TextEditingController controller;
  late final EventBus eventBus;

  // late final bool _shouldDisableAutoSyncOnLogOut;

  Future<void> onBackPressed() async {
    await _logout();
    if (mounted) {
      Navigator.of(context).pop();
    }
  }

  Future<void> _logout() async {
    final wallet = ref.read(pWallets).getWallet(widget.walletId);
    // if (_shouldDisableAutoSyncOnLogOut) {
    //   // disable auto sync if it was enabled only when loading wallet
    wallet.shouldAutoSync = false;
    // }
    ref.read(transactionFilterProvider.state).state = null;
    if (ref.read(prefsChangeNotifierProvider).isAutoBackupEnabled &&
        ref.read(prefsChangeNotifierProvider).backupFrequencyType ==
            BackupFrequencyType.afterClosingAWallet) {
      unawaited(ref.read(autoSWBServiceProvider).doBackup());
    }

    // Close the wallet according to syncing preferences.
    switch (ref.read(prefsChangeNotifierProvider).syncType) {
      case SyncingType.currentWalletOnly:
        // Close the wallet.
        unawaited(wallet.exit());
      // unawaited so we don't lag the UI.
      case SyncingType.selectedWalletsAtStartup:
        // Close if this wallet is not in the list to be synced.
        if (!ref
            .read(prefsChangeNotifierProvider)
            .walletIdsSyncOnStartup
            .contains(widget.walletId)) {
          unawaited(wallet.exit());
          // unawaited so we don't lag the UI.
        }
      case SyncingType.allWalletsOnStartup:
        // Do nothing.
        break;
    }

    ref.read(currentWalletIdProvider.notifier).state = null;
  }

  @override
  void initState() {
    controller = TextEditingController();
    final wallet = ref.read(pWallets).getWallet(widget.walletId);

    controller.text = wallet.info.name;

    eventBus =
        widget.eventBus != null ? widget.eventBus! : GlobalEventBus.instance;

    WidgetsBinding.instance.addPostFrameCallback((_) =>
        ref.read(currentWalletIdProvider.notifier).state = wallet.walletId);

    if (!wallet.shouldAutoSync) {
      //   // enable auto sync if it wasn't enabled when loading wallet
      wallet.shouldAutoSync = true;
      //   _shouldDisableAutoSyncOnLogOut = true;
      // } else {
      //   _shouldDisableAutoSyncOnLogOut = false;
    }

    wallet.refresh();

    super.initState();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final wallet = ref.watch(pWallets).getWallet(widget.walletId);

    final monke = wallet is BananoWallet ? wallet.getMonkeyImageBytes() : null;

    return DesktopScaffold(
      appBar: DesktopAppBar(
        background: Theme.of(context).extension<StackColors>()!.popupBG,
        leading: Expanded(
          child: Row(
            children: [
              const SizedBox(
                width: 32,
              ),
              AppBarIconButton(
                size: 32,
                color: Theme.of(context)
                    .extension<StackColors>()!
                    .textFieldDefaultBG,
                shadows: const [],
                icon: SvgPicture.asset(
                  Assets.svg.arrowLeft,
                  width: 18,
                  height: 18,
                  color: Theme.of(context)
                      .extension<StackColors>()!
                      .topNavIconPrimary,
                ),
                onPressed: onBackPressed,
              ),
              const SizedBox(
                width: 15,
              ),
              SvgPicture.file(
                File(
                  ref.watch(coinIconProvider(wallet.info.coin)),
                ),
                width: 32,
                height: 32,
              ),
              const SizedBox(
                width: 12,
              ),
              ConstrainedBox(
                constraints: const BoxConstraints(
                  minWidth: 48,
                ),
                child: IntrinsicWidth(
                  child: DesktopWalletNameField(
                    walletId: widget.walletId,
                  ),
                ),
              ),
              if (kDebugMode) const Spacer(),
              if (kDebugMode)
                Row(
                  children: [
                    const Text(
                      "Debug Height:",
                    ),
                    const SizedBox(
                      width: 2,
                    ),
                    Text(
                      ref.watch(pWalletChainHeight(widget.walletId)).toString(),
                    ),
                  ],
                ),
              const Spacer(),
              Row(
                children: [
                  NetworkInfoButton(
                    walletId: widget.walletId,
                    eventBus: eventBus,
                  ),
                  const SizedBox(
                    width: 2,
                  ),
                  WalletKeysButton(
                    walletId: widget.walletId,
                  ),
                  const SizedBox(
                    width: 2,
                  ),
                  WalletOptionsButton(
                    walletId: widget.walletId,
                  ),
                  const SizedBox(
                    width: 12,
                  ),
                ],
              ),
            ],
          ),
        ),
        useSpacers: false,
        isCompactHeight: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            RoundedWhiteContainer(
              padding: const EdgeInsets.all(20),
              child: Row(
                children: [
                  if (monke != null)
                    SvgPicture.memory(
                      Uint8List.fromList(monke!),
                      width: 60,
                      height: 60,
                    ),
                  if (monke == null)
                    SvgPicture.file(
                      File(
                        ref.watch(coinIconProvider(wallet.info.coin)),
                      ),
                      width: 40,
                      height: 40,
                    ),
                  const SizedBox(
                    width: 10,
                  ),
                  DesktopWalletSummary(
                    walletId: widget.walletId,
                    initialSyncStatus: wallet.refreshMutex.isLocked
                        ? WalletSyncStatus.syncing
                        : WalletSyncStatus.synced,
                  ),
                  const Spacer(),
                  DesktopWalletFeatures(
                    walletId: widget.walletId,
                  ),
                ],
              ),
            ),
            const SizedBox(
              height: 24,
            ),
            Row(
              children: [
                SizedBox(
                  width: sendReceiveColumnWidth,
                  child: Text(
                    "My wallet",
                    style: STextStyles.desktopTextExtraSmall(context).copyWith(
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .textFieldActiveSearchIconLeft,
                    ),
                  ),
                ),
                const SizedBox(
                  width: 16,
                ),
                Expanded(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        wallet.cryptoCurrency.hasTokenSupport
                            ? "Tokens"
                            : "Recent activity",
                        style:
                            STextStyles.desktopTextExtraSmall(context).copyWith(
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textFieldActiveSearchIconLeft,
                        ),
                      ),
                      CustomTextButton(
                        text: wallet.cryptoCurrency.hasTokenSupport
                            ? "Edit"
                            : "See all",
                        onTap: () async {
                          if (wallet.cryptoCurrency.hasTokenSupport) {
                            final result = await showDialog<int?>(
                              context: context,
                              builder: (context) => EditWalletTokensView(
                                walletId: widget.walletId,
                                isDesktopPopup: true,
                              ),
                            );

                            if (result == 42) {
                              // wallet tokens were edited so update ui
                              setState(() {});
                            }
                          } else {
                            await Navigator.of(context).pushNamed(
                              wallet.isarTransactionVersion == 2
                                  ? AllTransactionsV2View.routeName
                                  : AllTransactionsView.routeName,
                              arguments: widget.walletId,
                            );
                          }
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(
              height: 14,
            ),
            Expanded(
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(
                    width: sendReceiveColumnWidth,
                    child: MyWallet(
                      walletId: widget.walletId,
                    ),
                  ),
                  const SizedBox(
                    width: 16,
                  ),
                  Expanded(
                    child: wallet.cryptoCurrency.hasTokenSupport
                        ? MyTokensView(
                            walletId: widget.walletId,
                          )
                        : wallet.isarTransactionVersion == 2
                            ? TransactionsV2List(
                                walletId: widget.walletId,
                              )
                            : TransactionsList(
                                walletId: widget.walletId,
                              ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
